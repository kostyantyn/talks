How we use Go to build APIs
PubNative best practices and patterns

Kostiantyn Stepaniuk
PubNative GmbH
kostiantyn@pubnative.net

* 1/20 Pick the right language
.image how-we-use-go-to-build-apis/img/gopher.png 500 _

* 2/20 Use the same structure
.image how-we-use-go-to-build-apis/img/structure.png 500 _

* 3/20 Simple pattern matching
    http.HandleFunc("/handle/b", func(http.ResponseWriter, *http.Request) {})
    http.HandleFunc("/handle/a", func(http.ResponseWriter, *http.Request) {})
- No powerful URL routers like [[https://github.com/gorilla/mux][gorilla/mux]]
- Don't carry parameters in the path
- Use a query string or a request payload to accept parameters

* 4/20 No extra frameworks for HTTP protocol
.code how-we-use-go-to-build-apis/code/no_frameworks_for_http_protocol.go /START OMIT/,/END OMIT/
- Go provides all the necessary wrappers
- Extra abstraction adds performance penalty
- We need to know what happens under the hood to optimize

* 5/20 Use explicit types, no interfaces
.code how-we-use-go-to-build-apis/code/explicit_types.go
- We solve specific problems with concrete tools
- Clear understanding what is used and how
- Renaming can be done in one command in your favorite editor

* 6/20 One way of doing things
.code how-we-use-go-to-build-apis/code/one_way_of_doing_things.go

* 7/20 Own pool of workers instead of what libraries provide
.code how-we-use-go-to-build-apis/code/own_pool_of_workers.go /START OMIT/,/END OMIT/
- Know how many connections are used
- Avoid re-establishing connections when sent messages are more than the pool size
- No hidden bottlenecks, e.g., locks are used to manage the pool
- Easy to profile the pool

* 8/20 Always use non-blocking sending
    select {
    case ch <- "value":
    default:
        // take an action
    }
- No `time.After` to control the pool
- Use buffered channels for backpressure

* 9/20 Requirements to the pool
- Worker must know how to restart itself
- Fixed size of the pool and adjust per instance type
- Send profiled metrics to centralized location and keep on the instance

What to profile:

- How long does it take to process the job
- How many workers are used right now
- What was the maximum number of concurrently occupied workers during lifetime of the process

* 10/20 Check pool availability

* 11/20 Double-buffers

* 12/20 Testing

* 13/20 Microservices




